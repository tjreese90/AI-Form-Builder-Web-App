{"version":3,"sources":["../../src/expo-sqlite/migrator.ts"],"sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport type { MigrationMeta } from '~/migrator.ts';\nimport type { ExpoSQLiteDatabase } from './driver.ts';\n\ninterface MigrationConfig {\n    journal: {\n        entries: { idx: number; when: number; tag: string; breakpoints: boolean }[];\n    };\n    migrations: Record<string, string>;\n}\n\nasync function readMigrationFiles({ journal, migrations }: MigrationConfig): Promise<MigrationMeta[]> {\n    const migrationQueries: MigrationMeta[] = [];\n\n    for await (const journalEntry of journal.entries) {\n        const query = migrations[`m${journalEntry.idx.toString().padStart(4, '0')}`];\n\n        if (!query) {\n            throw new Error(`Missing migration: ${journalEntry.tag}`);\n        }\n\n        try {\n            const result = query.split('--> statement-breakpoint').map((it) => {\n                return it;\n            });\n\n            migrationQueries.push({\n                sql: result,\n                bps: journalEntry.breakpoints,\n                folderMillis: journalEntry.when,\n                hash: '',\n            });\n        } catch {\n            throw new Error(`Failed to parse migration: ${journalEntry.tag}`);\n        }\n    }\n\n    return migrationQueries;\n}\n\nexport async function migrate<TSchema extends Record<string, unknown>>(\n    db: ExpoSQLiteDatabase<TSchema>,\n    config: MigrationConfig,\n) {\n    const migrations = await readMigrationFiles(config);\n    return db.dialect.migrate(migrations, db.session);\n}\n\ninterface State {\n\tsuccess: boolean;\n\terror?: Error;\n}\n\ntype Action =\n\t| { type: 'migrating' }\n\t| { type: 'migrated'; payload: true }\n\t| { type: 'error'; payload: Error }\n\nexport const useMigrations = (db: ExpoSQLiteDatabase<any>, migrations: {\n\tjournal: {\n\t\tentries: { idx: number; when: number; tag: string; breakpoints: boolean }[];\n\t};\n\tmigrations: Record<string, string>;\n}): State => {\n\tconst initialState: State = {\n\t\tsuccess: false,\n\t\terror: undefined,\n\t}\n\n\tconst fetchReducer = (state: State, action: Action): State => {\n\t\tswitch (action.type) {\n\t\t\tcase 'migrating': {\n\t\t\t\treturn { ...initialState }\n\t\t\t}\n\t\t\tcase 'migrated': {\n\t\t\t\treturn { ...initialState, success: action.payload }\n\t\t\t}\n\t\t\tcase 'error': {\n\t\t\t\treturn { ...initialState, error: action.payload }\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn state\n\t\t\t}\n\t\t}\n\t}\n\n\tconst [state, dispatch] = useReducer(fetchReducer, initialState);\n\n\tuseEffect(() => {\n\t\tdispatch({ type: 'migrating' })\n\t\ttry {\n\t\t\tmigrate(db, migrations as any).then(() => {\n\t\t\t\tdispatch({ type: 'migrated', payload: true })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\tdispatch({ type: 'error', payload: error as Error })\n\t\t}\n\t}, []);\n\n\treturn state;\n}"],"mappings":"AAAA,SAAS,WAAW,kBAAkB;AAWtC,eAAe,mBAAmB,EAAE,SAAS,WAAW,GAA8C;AAClG,QAAM,mBAAoC,CAAC;AAE3C,mBAAiB,gBAAgB,QAAQ,SAAS;AAC9C,UAAM,QAAQ,WAAW,IAAI,aAAa,IAAI,SAAS,EAAE,SAAS,GAAG,GAAG,CAAC,EAAE;AAE3E,QAAI,CAAC,OAAO;AACR,YAAM,IAAI,MAAM,sBAAsB,aAAa,GAAG,EAAE;AAAA,IAC5D;AAEA,QAAI;AACA,YAAM,SAAS,MAAM,MAAM,0BAA0B,EAAE,IAAI,CAAC,OAAO;AAC/D,eAAO;AAAA,MACX,CAAC;AAED,uBAAiB,KAAK;AAAA,QAClB,KAAK;AAAA,QACL,KAAK,aAAa;AAAA,QAClB,cAAc,aAAa;AAAA,QAC3B,MAAM;AAAA,MACV,CAAC;AAAA,IACL,QAAQ;AACJ,YAAM,IAAI,MAAM,8BAA8B,aAAa,GAAG,EAAE;AAAA,IACpE;AAAA,EACJ;AAEA,SAAO;AACX;AAEA,eAAsB,QAClB,IACA,QACF;AACE,QAAM,aAAa,MAAM,mBAAmB,MAAM;AAClD,SAAO,GAAG,QAAQ,QAAQ,YAAY,GAAG,OAAO;AACpD;AAYO,MAAM,gBAAgB,CAAC,IAA6B,eAK9C;AACZ,QAAM,eAAsB;AAAA,IAC3B,SAAS;AAAA,IACT,OAAO;AAAA,EACR;AAEA,QAAM,eAAe,CAACA,QAAc,WAA0B;AAC7D,YAAQ,OAAO,MAAM;AAAA,MACpB,KAAK,aAAa;AACjB,eAAO,EAAE,GAAG,aAAa;AAAA,MAC1B;AAAA,MACA,KAAK,YAAY;AAChB,eAAO,EAAE,GAAG,cAAc,SAAS,OAAO,QAAQ;AAAA,MACnD;AAAA,MACA,KAAK,SAAS;AACb,eAAO,EAAE,GAAG,cAAc,OAAO,OAAO,QAAQ;AAAA,MACjD;AAAA,MACA,SAAS;AACR,eAAOA;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAEA,QAAM,CAAC,OAAO,QAAQ,IAAI,WAAW,cAAc,YAAY;AAE/D,YAAU,MAAM;AACf,aAAS,EAAE,MAAM,YAAY,CAAC;AAC9B,QAAI;AACH,cAAQ,IAAI,UAAiB,EAAE,KAAK,MAAM;AACzC,iBAAS,EAAE,MAAM,YAAY,SAAS,KAAK,CAAC;AAAA,MAC7C,CAAC;AAAA,IACF,SAAS,OAAO;AACf,eAAS,EAAE,MAAM,SAAS,SAAS,MAAe,CAAC;AAAA,IACpD;AAAA,EACD,GAAG,CAAC,CAAC;AAEL,SAAO;AACR;","names":["state"]}